
자식에게 상속 되는게 있고 안되는게 있음


부모 태그와 자식 태그의 계층 구조


body의 그레이를 지정했으나
p에 빨강을 적용한다 하면
애초에 p에 그레이를 적용 안하게 하기 위한 기술

이걸 이해하기 위해선 계층 구조를 확실하게 알아야 함

버츄얼 돔

#af2f2f26 맘에 드는 색상



조상 자손 { }
#content li 
부모 > 자식 { }
ul > li
태그 + 다름 태그 { }
img + ul

3_1
대상자조건1조건2 { }
div#menu li.c2 { }

input[type="text"]


specificity
* = 0
태그, pseudo select = 1
클래스, 조건 = 10
아이디 = 100
inline style = 1000


태그의 너비, 높이 = 지정하지 않으면 자동 계산
너비 - 부모태그의 넓이
div, p, h1~h6, ul 등
높이 - 자식 태그의 높이 (컨텐트)
= block = 넓이, 높이 지정 가능

컨텐트의 넓이, 높이 또한 자동 계산
= inline = 넓이 높이를 임의적으로 바꿀 수 없음


1129
테두리 border
<p> 콘텐트  </p>
에서 border와의 여백을 margin
콘텐트와 border의 간격 padding

border-top-style/color/width: solid;
border-top:width color style;
border: width color style;
테두리 모든 방향
border-style:
border-color:

우선순위가 낮을걸 위쪽으로 나열



Raster 폰트와  Vector 폰트
Raster 폰트는 픽셀 단위로 문자를 표시
-> 출력 속도가 빠름 / 폰트 크기에 따라 각 문자를 만들어야함 
정해진 크기보다 크게 출력하면 단순히 각 픽셀의 크기를 늘이기 때문에
계단현상이 발생하게 됨
예) curier

그래서 등장한게 vector 폰트
글자 크기를 늘이더라도 명령을 통해 그리리 때문에
계단현상이 발생하지 않는다
글자르 그리는 명령을 수행
-> 출력속도가 느림
true-tiyp 폰트
이미지 단순하면 파일 크기가 낮고
이미지가 복잡하면 파일크기 증가


span 태그
텍스트를 분리 하고자 할 경우 사용


document 도구
태그를 다루는 기능이 있음
- getElementByid(태그id)
태그객체 리턴

- getElementsByTagname(태그이름)
태그목록 리턴

-createElement(태그이름)
태그객체를 생성해서 리턴

-setAtribute(속성명, 속성값)
태그의 속성 값을 설정하는 기능

1130
태두리

float 시 마진끼리 겹쳐지지가 않음


1201
cpu를 통해 명령을 실행시키는 방법을 명세서로 제공함
신호 보내는 비트 규칙 = instructions set 명령어 셋

cpu 버전 up 할때마다 명령 규칙이 추가
cpu 마다 명령어 다름
cpu 제조사 마다 명령어 다름 -> 전기 신호를 보내는 규칙


명령어 작성
1. cpu instruction set 명세서를 보고 직접 명령어 작성
나 - 작성 - 명령어 - 시행 - cpu

특징
1. cpu bit가 적은 8bit 시절에는 개발자가 직접 작성하기도 함
2. 보통 2진수를 짧게 표현한 16진수를 사용해서 작성
3. 인간의 문자와 거리가 멀기 때문에 작성하기 매우 불편하고 힘듦
4. cpu bit가 32bit, 64bit로 늘어나면서 더 어렵게 됨
5. cpu 마다 명령어가 다르기 때문에 다양한 cpu에서 실행할 수 있는 명령어를 작성하기 매우 힘들다

명령어 작성-Assembly
2. 직접 기계어로 작성하는 대신 간결한 영어 단어로 이루어진 명령어 사용하기
 
특징
1. 명령어가 영어 단어와 비슷해서 작성하기 편함
2. cpu마다 다르게 작성할 필요가 없음 (컴파일러의 힘)


명령어 작성 - C
더 인간 친화적인 프로그래밍 언어로 명령어 작성

같은 기계어라도 운영체제 마다 명령어들을 구성하는 방식이 다르기 때문에
OS마다 다르다
=> 같은 한국어라도 회사마다 이력서 양식이 다른것과 같음


Intel CPU 기계어라도 명령문의 배치 방법이 다르기 때문에


언어선택?
프로젝트 성격에 따라 언어를 선택해야 함
인공지능, 머신러닝, 딥러닝 : python
webapp : java, php, go
webui: js


컴파일 방식과 인터프리터 방식

컴파일 방식: .c 파일을 C 컴파일러로 OS에 맞는 기계어로 컴파일 하면 OS에서 load 해서 CPU에 excution 해준다
- 실행할 때 기계어 파일만 있으면 됨
- 소스파일 필요없음-> 소스파일 보호 가능
- 실행할때 컴파일러 불필요
- 기계어 바로 실행해서 속도가 빠름
인터프리트 방식: .js 를 JSinterfreter로 read 해서 OS로 interfrete해서 보내면 CPU에서 exetution 함
- 실행할 때마다 소스파일 필요->소스파일 공개
- 실행하려면 인터프리터 필요
- 매번 명령어를 해석해서 실행해서 속도 느림


JIT compile과 AOT compile
1. plain 인터프리터: 매번 소스를 검사하고 해석하기 때문에 속도 느림

2. JIT compile: 실행 하려는 일부 코드를 컴파일해서 기계어로 바꾼후 execution
-> 컴파일 할 때 잠깐 느려지지만 이후에 실행할 때는 빨라짐

3. AOT compile: 특정 시점에 미리 컴파일 
소스를 hdd에 설치 하고 설치 이전에 미리 전체 소스를 컴파일 해둔다 => 설치 시간이 좀더 걸림
실행은 컴파일과 같음


playstore 에는
app이 bytecode로 올라와 있음
bytecode - 진짜 기계어가 아닌 기계어에 흡사한 코드 - 중간코드 - p-code

app을 설치할때 해당 cpu에 맞춰서 컴파일 한다
이게 AOT 컴파일


web browser  과 javascript


**객체 지향 프로그래밍의 기초 핵심



document.getElementById("태그id")
객체(함수가 일할때 참고할 기본 데이터).함수 (함수가 기본 데이터를 다룰때 사용할 값)
-> 학생명단.find("홍길동")

객체와 메서드(함수), 파라미터의 관계

학생명단.find("홍길동")

학생명단 - 기본 데이터
find - 작업 = 함수 = 매서드 = 작업자 operator
홍길동 - 작업에 사용하는 부가테이터

기본 데이터에서 함수를 사용하면 덩어리를 리턴함
그 덩어리에서 부가 데이터를 작업



JavaScript와 ECMAScript 관계
-> 크롬과 크로미움의 관계와 비슷함

ECMA script (ECMA-262)를 기준으로 가져와서 + a 한게javascript

웹페이지 조립


exam06 - 서버에 요청하는 fucntion 예제



서버에 자원을 요청하는 방법
server-side-rendering // client-side-rendering

SSR - 서버에서 HTML을 만들어 준다
CSR - json 또는 xml 데이터를 받아서  HTML을 만들어 삽입 -> client에서 HTML을 만듬


json 포맷
object literal 문법을 참고해서 만든 포맷
- 객체 property 이름은 반드시 문자열로 표현 " "
- 함수는 표현할 수 없음. 변수만 가능

json built-in 객체
JSON.parse(문자열 포맷) => 자바스크립트객체를 리턴
JAON.stringify(자바스크립트객체) => 문자열 포맷을 리턴





